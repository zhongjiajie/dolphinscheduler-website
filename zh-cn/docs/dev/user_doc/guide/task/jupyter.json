{
  "filename": "jupyter.md",
  "__html": "<h1>Jupyter</h1>\n<h2>综述</h2>\n<p><code>Jupyter</code>任务类型，用于创建并执行<code>Jupyter</code>类型任务。worker 执行该任务的时候，会通过<code>papermill</code>执行<code>jupyter note</code>。\n点击<a href=\"https://papermill.readthedocs.io/en/latest/\">这里</a> 获取更多关于<code>papermill</code>的信息。</p>\n<h2>Conda虚拟环境配置</h2>\n<ul>\n<li>在<code>common.properties</code>配置<code>conda.path</code>，将其指向您的<code>conda.sh</code>。这里的<code>conda</code>应该是您用来管理您的 <code>papermill</code>和<code>jupyter</code>所在python环境的相同<code>conda</code>。\n点击 <a href=\"https://docs.conda.io/en/latest/\">这里</a> 获取更多关于<code>conda</code>的信息.</li>\n<li><code>conda.path</code>默认设置为<code>/opt/anaconda3/etc/profile.d/conda.sh</code>。 如果您不清楚您的<code>conda</code>环境在哪里，只需要在命令行执行<code>conda info | grep -i 'base environment'</code>即可获得。</li>\n</ul>\n<blockquote>\n<p>注意：<code>Jupyter任务插件</code>使用<code>source</code>命令激活conda环境，\n如果您的租户没有<code>source</code>命令使用权限，<code>Jupyter任务插件</code>将无法使用。</p>\n</blockquote>\n<h2>Python依赖管理</h2>\n<h3>使用预装好的Conda环境</h3>\n<ol>\n<li>手动或使用<code>shell任务</code>在您的目标机器上创建conda环境。</li>\n<li>在您的<code>jupyter任务</code>中，将<code>condaEnvName</code>设置为您在上一步创建的conda环境名。</li>\n</ol>\n<h3>使用打包的Conda环境</h3>\n<ol>\n<li>使用 <a href=\"https://conda.github.io/conda-pack/\">Conda-Pack</a> 将您的conda环境打包成<code>tarball</code>.</li>\n<li>将您打包好的conda环境上传到<code>资源中心</code>.</li>\n<li>在您的<code>jupyter任务</code>资源设置中，添加您在上一步中上传的conda环境包，如<code>jupyter_env.tar.gz</code>.</li>\n</ol>\n<blockquote>\n<p><strong><em>提示:</em></strong> 请您按照 <a href=\"https://conda.github.io/conda-pack/\">Conda-Pack</a> 官方指导打包conda环境，\n正确打包出的conda环境包解压后文件目录结构应和下图完全一致：</p>\n</blockquote>\n<pre><code>.\n├── bin\n├── conda-meta\n├── etc\n├── include\n├── lib\n├── share\n└── ssl\n</code></pre>\n<blockquote>\n<p>注意: 请严格按照上述<code>conda pack</code>指示操作，并且不要随意修改<code>bin/activate</code>。\n<code>Jupyter任务插件</code>使用<code>source</code>命令激活您打包的conda环境。\n若您对使用<code>source</code>命令有安全性上的担忧，请使用其他方法管理您的python依赖。</p>\n</blockquote>\n<h3>由依赖需求文本文件临时构建</h3>\n<ol>\n<li>在<code>资源中心</code>创建或上传<code>.txt</code>格式的python依赖需求文本文件。</li>\n<li>将<code>jupyter任务</code>中的<code>condaEnvName</code>参数设置成您的python依赖需求文本文件，如<code>requirements.txt</code>。</li>\n<li>在您<code>jupyter任务</code>的<code>资源</code>中选取您的python依赖需求文本文件，如<code>requirements.txt</code>。</li>\n</ol>\n<p>如下是一个依赖需求文本文件的样例，通过该文件，<code>jupyter任务插件</code>会自动构建您的python依赖，并执行您的python代码，\n执行完成后会自动释放临时构建的环境。</p>\n<pre><code class=\"language-text\">fastjsonschema==2.15.3\nfonttools==4.33.3\ngeojson==2.5.0\nidentify==2.4.11\nidna==3.3\nimportlib-metadata==4.11.3\nimportlib-resources==5.7.1\nipykernel==5.5.6\nipython==8.2.0\nipython-genutils==0.2.0\njedi==0.18.1\nJinja2==3.1.1\njson5==0.9.6\njsonschema==4.4.0\njupyter-client==7.3.0\njupyter-core==4.10.0\njupyter-server==1.17.0\njupyterlab==3.3.4\njupyterlab-pygments==0.2.2\njupyterlab-server==2.13.0\nkiwisolver==1.4.2\nMarkupSafe==2.1.1\nmatplotlib==3.5.2\nmatplotlib-inline==0.1.3\nmistune==0.8.4\nnbclassic==0.3.7\nnbclient==0.6.0\nnbconvert==6.5.0\nnbformat==5.3.0\nnest-asyncio==1.5.5\nnotebook==6.4.11\nnotebook-shim==0.1.0\nnumpy==1.22.3\npackaging==21.3\npandas==1.4.2\npandocfilters==1.5.0\npapermill==2.3.4\n</code></pre>\n<h2>创建任务</h2>\n<ul>\n<li>点击项目管理-项目名称-工作流定义，点击&quot;创建工作流&quot;按钮，进入DAG编辑页面。</li>\n<li>工具栏中拖动 <img src=\"../../../../img/tasks/icons/jupyter.png\" width=\"15\"/> 到画板中，即可完成创建。</li>\n</ul>\n<h2>任务参数</h2>\n<ul>\n<li>任务名称：设置任务的名称。一个工作流定义中的节点名称是唯一的。</li>\n<li>运行标志：标识这个节点是否能正常调度,如果不需要执行，可以打开禁止执行开关。</li>\n<li>描述：描述该节点的功能。</li>\n<li>任务优先级：worker线程数不足时，根据优先级从高到低依次执行，优先级一样时根据先进先出原则执行。</li>\n<li>Worker分组：任务分配给worker组的机器机执行，选择Default，会随机选择一台worker机执行。</li>\n<li>失败重试次数：任务失败重新提交的次数，支持下拉和手填。</li>\n<li>失败重试间隔：任务失败重新提交任务的时间间隔，支持下拉和手填。</li>\n<li>Cpu 配额: 为执行的任务分配指定的CPU时间配额，单位百分比，默认-1代表不限制，例如1个核心的CPU满载是100%，16个核心的是1600%。</li>\n<li>最大内存：为执行的任务分配指定的内存大小，超过会触发OOM被Kill同时不会进行自动重试，单位MB，默认-1代表不限制。这个功能由 <a href=\"../../architecture/configuration.md\">task.resource.limit.state</a> 控制</li>\n<li>超时告警：勾选超时告警、超时失败，当任务超过&quot;超时时长&quot;后，会发送告警邮件并且任务执行失败.这个功能由 <a href=\"../../architecture/configuration.md\">task.resource.limit.state</a> 控制</li>\n<li>前置任务：选择当前任务的前置任务，会将被选择的前置任务设置为当前任务的上游。</li>\n<li>Conda Env Name: Conda环境或打包的Conda环境包名称</li>\n<li>Input Note Path: 输入的jupyter note模板路径。</li>\n<li>Out Note Path: 输出的jupyter note路径。</li>\n<li>Jupyter Parameters: 用于对接jupyter note参数化的JSON格式参数。</li>\n<li>Kernel: Jupyter notebook 内核。</li>\n<li>Engine: 用于执行Jupyter note的引擎名称。</li>\n<li>Jupyter Execution Timeout: 对于每个jupyter notebook cell设定的超时时间。</li>\n<li>Jupyter Start Timeout: 对于jupyter notebook kernel设定的启动超时时间。</li>\n<li>Others: 传入papermill命令的其他参数。</li>\n</ul>\n<h2>任务样例</h2>\n<h3>简单的Jupyter任务样例</h3>\n<p>这个示例展示了如何创建Jupyter任务节点：</p>\n<p><img src=\"../../../../img/tasks/demo/jupyter.png\" alt=\"demo-jupyter-simple\"></p>\n",
  "link": "/dist/zh-cn/docs/dev/user_doc/guide/task/jupyter.html",
  "meta": {}
}