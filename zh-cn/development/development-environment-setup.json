{
  "filename": "development-environment-setup.md",
  "__html": "<h1>DolphinScheduler 开发手册</h1>\n<h2>前置条件</h2>\n<p>在搭建 DolphinScheduler 开发环境之前请确保你已经安装一下软件</p>\n<ul>\n<li><a href=\"https://git-scm.com/downloads\">Git</a>: 版本控制系统</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a>: 后端开发</li>\n<li><a href=\"http://maven.apache.org/download.cgi\">Maven</a>: Java包管理系统</li>\n<li><a href=\"https://nodejs.org/en/download\">Node</a>: 前端开发</li>\n</ul>\n<h3>克隆代码库</h3>\n<p>通过你 git 管理工具下载 git 代码，下面以 git-core 为例</p>\n<pre><code class=\"language-shell\">mkdir dolphinscheduler\ncd dolphinscheduler\ngit clone git@github.com:apache/dolphinscheduler.git\n</code></pre>\n<h3>编译源码</h3>\n<ul>\n<li>如果使用MySQL数据库，请注意修改pom.xml， 添加 <code>mysql-connector-java</code> 依赖。</li>\n<li>运行 <code>mvn -U install package -Prelease -Dmaven.test.skip=true</code></li>\n</ul>\n<h2>开发者须知</h2>\n<p>DolphinScheduler 开发环境配置有两个方式，分别是standalone模式，以及普通模式</p>\n<ul>\n<li><a href=\"#dolphinscheduler-standalone%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F\">standalone模式</a>：<strong>推荐使用，但仅支持 1.3.9 及以后的版本</strong>，方便快速的开发环境搭建，能解决大部分场景的开发</li>\n<li><a href=\"#dolphinscheduler-%E6%99%AE%E9%80%9A%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F\">普通模式</a>：master、worker、api等单独启动，能更好的的模拟真实生产环境，可以覆盖的测试环境更多</li>\n</ul>\n<h2>DolphinScheduler Standalone快速开发模式</h2>\n<blockquote>\n<p><strong><em>注意：</em></strong> 仅供单机开发调试使用，默认使用 H2 Database,Zookeeper Testing Server\nStandalone 仅在 DolphinScheduler 1.3.9 及以后的版本支持</p>\n</blockquote>\n<h3>分支选择</h3>\n<p>开发不同的代码需要基于不同的分支</p>\n<ul>\n<li>如果想基于二进制包开发，切换到对应版本的代码，如 1.3.9 则是 <code>1.3.9-release</code></li>\n<li>如果想要开发最新代码，切换到 <code>dev</code> 分支</li>\n</ul>\n<h3>启动后端</h3>\n<p>在 Intellij IDEA 找到并启动类 <code>org.apache.dolphinscheduler.server.StandaloneServer</code> 即可完成后端启动</p>\n<h3>启动前端</h3>\n<p>安装前端依赖并运行前端组件</p>\n<pre><code class=\"language-shell\">cd dolphinscheduler-ui\nnpm install\nnpm run start\n</code></pre>\n<p>截止目前，前后端已成功运行起来，浏览器访问<a href=\"http://localhost:8888\">http://localhost:8888</a>，并使用默认账户密码 <strong>admin/dolphinscheduler123</strong> 即可完成登录</p>\n<h2>DolphinScheduler 普通开发模式</h2>\n<h3>必要软件安装</h3>\n<h4>zookeeper</h4>\n<p>下载 <a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3\">ZooKeeper</a>，解压</p>\n<ul>\n<li>\n<p>在 ZooKeeper 的目录下新建 zkData、zkLog文件夹</p>\n</li>\n<li>\n<p>将 conf 目录下的 <code>zoo_sample.cfg</code> 文件，复制一份，重命名为 <code>zoo.cfg</code>，修改其中数据和日志的配置，如：</p>\n<pre><code class=\"language-shell\">dataDir=/data/zookeeper/data ## 此处使用绝对路径\ndataLogDir=/data/zookeeper/datalog\n</code></pre>\n</li>\n<li>\n<p>运行 <code>./bin/zkServer.sh</code></p>\n</li>\n</ul>\n<h4>数据库</h4>\n<p>DolphinScheduler 的元数据存储在关系型数据库中，目前支持的关系型数据库包括 MySQL 以及 PostgreSQL。下面以MySQL为例，启动数据库并创建新 database 作为 DolphinScheduler 元数据库，这里以数据库名 dolphinscheduler 为例</p>\n<p>创建完新数据库后，将 <code>dolphinscheduler/dolphinscheduler-dao/src/main/resources/sql/dolphinscheduler_mysql.sql</code> 下的 sql 文件直接在 MySQL 中运行，完成数据库初始化</p>\n<h4>启动后端</h4>\n<p>下面步骤将引导如何启动 DolphinScheduler 后端服务</p>\n<h5>必要的准备工作</h5>\n<ul>\n<li>\n<p>打开项目：使用开发工具打开项目，这里以 Intellij IDEA 为例，打开后需要一段时间，让 Intellij IDEA 完成以依赖的下载</p>\n</li>\n<li>\n<p>插件的配置（<strong>仅 2.0 及以后的版本需要</strong>）：</p>\n<ul>\n<li>注册中心插件配置, 以Zookeeper 为例 (registry.properties)\ndolphinscheduler-service/src/main/resources/registry.properties</li>\n</ul>\n<pre><code class=\"language-registry.properties\"> registry.plugin.name=zookeeper\n registry.servers=127.0.0.1:2181\n</code></pre>\n</li>\n<li>\n<p>必要的修改</p>\n<ul>\n<li>如果使用 MySQL 作为元数据库，需要先修改 <code>dolphinscheduler/pom.xml</code>，将 <code>mysql-connector-java</code> 依赖的 <code>scope</code> 改为 <code>compile</code>，使用 PostgreSQL 则不需要</li>\n<li>修改数据库配置，修改 <code>dolphinscheduler-dao/src/main/resources/application-mysql.yaml</code> 文件中的数据库配置</li>\n</ul>\n<p>本样例以 MySQL 为例，其中数据库名为 dolphinscheduler，账户名密码均为 dolphinscheduler</p>\n<pre><code class=\"language-application-mysql.yaml\"> spring:\n   datasource:\n     driver-class-name: com.mysql.jdbc.Driver\n     url: jdbc:mysql://127.0.0.1:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8\n     username: ds_user\n     password: dolphinscheduler\n</code></pre>\n</li>\n<li>\n<p>修改日志级别：为以下配置增加一行内容 <code>&lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</code> 使日志能在命令行中显示</p>\n<p><code>dolphinscheduler-server/src/main/resources/logback-worker.xml</code></p>\n<p><code>dolphinscheduler-server/src/main/resources/logback-master.xml</code></p>\n<p><code>dolphinscheduler-api/src/main/resources/logback-api.xml</code></p>\n<p>修改后的结果如下：</p>\n<pre><code class=\"language-diff\">&lt;root level=&quot;INFO&quot;&gt;\n<span class=\"hljs-addition\">+  &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span>\n  &lt;appender-ref ref=&quot;APILOGFILE&quot;/&gt;\n  &lt;appender-ref ref=&quot;SKYWALKING-LOG&quot;/&gt;\n&lt;/root&gt;\n</code></pre>\n</li>\n</ul>\n<h5>启动服务</h5>\n<p>我们需要启动三个服务，包括 MasterServer，WorkerServer，ApiApplicationServer</p>\n<ul>\n<li>MasterServer：在 Intellij IDEA 中执行 <code>org.apache.dolphinscheduler.server.master.MasterServer</code> 中的 <code>main</code> 方法，并配置 <em>VM Options</em> <code>-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false -Dspring.profiles.active=mysql</code></li>\n<li>WorkerServer：在 Intellij IDEA 中执行 <code>org.apache.dolphinscheduler.server.worker.WorkerServer</code> 中的 <code>main</code> 方法，并配置 <em>VM Options</em> <code>-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false -Dspring.profiles.active=mysql</code></li>\n<li>ApiApplicationServer：在 Intellij IDEA 中执行 <code>org.apache.dolphinscheduler.api.ApiApplicationServer</code> 中的 <code>main</code> 方法，并配置 <em>VM Options</em> <code>-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api,mysql</code>。启动完成可以浏览 Open API 文档，地址为 <a href=\"http://localhost:12345/dolphinscheduler/doc.html\">http://localhost:12345/dolphinscheduler/doc.html</a></li>\n</ul>\n<blockquote>\n<p>VM Options <code>-Dspring.profiles.active=mysql</code> 中 <code>mysql</code> 表示指定的配置文件</p>\n</blockquote>\n<h3>启动前端</h3>\n<p>安装前端依赖并运行前端组件</p>\n<pre><code class=\"language-shell\">cd dolphinscheduler-ui\nnpm install\nnpm run start\n</code></pre>\n<p>截止目前，前后端已成功运行起来，浏览器访问<a href=\"http://localhost:8888\">http://localhost:8888</a>，并使用默认账户密码 <strong>admin/dolphinscheduler123</strong> 即可完成登录</p>\n",
  "link": "/dist/zh-cn/development/development-environment-setup.html",
  "meta": {}
}