{
  "filename": "openmldb.md",
  "__html": "<h1>OpenMLDB Node</h1>\n<h2>Overview</h2>\n<p><a href=\"https://openmldb.ai/\">OpenMLDB</a> is an excellent open source machine learning database, providing a full-stack\nFeatureOps solution for production.</p>\n<p>OpenMLDB task plugin used to execute tasks on OpenMLDB cluster.</p>\n<h2>Create Task</h2>\n<ul>\n<li>Click <code>Project Management -&gt; Project Name -&gt; Workflow Definition</code>, and click the <code>Create Workflow</code> button to enter the DAG editing page.</li>\n<li>Drag from the toolbar <img src=\"../../../../img/tasks/icons/openmldb.png\" width=\"15\"/> task node to canvas.</li>\n</ul>\n<h2>Task Parameters</h2>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node Name</td>\n<td>Set the name of the task. Node names within a workflow definition are unique.</td>\n</tr>\n<tr>\n<td>Run flag</td>\n<td>Indicates whether the node can be scheduled normally. If it is not necessary to execute, you can turn on the prohibiting execution switch.</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Describes the function of this node.</td>\n</tr>\n<tr>\n<td>Task priority</td>\n<td>When the number of worker threads is insufficient, they are executed in order from high to low according to the priority, and they are executed according to the first-in, first-out principle when the priority is the same.</td>\n</tr>\n<tr>\n<td>Worker group</td>\n<td>The task is assigned to the machines in the worker group for execution. If Default is selected, a worker machine will be randomly selected for execution.</td>\n</tr>\n<tr>\n<td>Task group name</td>\n<td>The group in Resources, if not configured, it will not be used.</td>\n</tr>\n<tr>\n<td>Environment Name</td>\n<td>Configure the environment in which to run the script.</td>\n</tr>\n<tr>\n<td>Number of failed retries</td>\n<td>The number of times the task is resubmitted after failure. It supports drop-down and manual filling.</td>\n</tr>\n<tr>\n<td>Failure Retry Interval</td>\n<td>The time interval for resubmitting the task if the task fails. It supports drop-down and manual filling.</td>\n</tr>\n<tr>\n<td>Timeout alarm</td>\n<td>Check Timeout Alarm and Timeout Failure. When the task exceeds the &quot;timeout duration&quot;, an alarm email will be sent and the task execution will fail.</td>\n</tr>\n<tr>\n<td>Predecessor task</td>\n<td>Selecting the predecessor task of the current task will set the selected predecessor task as the upstream of the current task.</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>OpenMLDB cluster zookeeper address, e.g. 127.0.0.1:2181.</td>\n</tr>\n<tr>\n<td>zookeeper path</td>\n<td>OpenMLDB cluster zookeeper path, e.g. /openmldb.</td>\n</tr>\n<tr>\n<td>Execute Mode</td>\n<td>Determine the init mode, offline or online. You can switch it in sql statement.</td>\n</tr>\n<tr>\n<td>SQL statement</td>\n<td>SQL statement.</td>\n</tr>\n<tr>\n<td>Custom parameters</td>\n<td>It is the user-defined parameters of Python, which will replace the content with ${variable} in the script.</td>\n</tr>\n</tbody>\n</table>\n<h2>Task Examples</h2>\n<h3>Load data</h3>\n<p><img src=\"../../../../img/tasks/demo/openmldb-load-data.png\" alt=\"load data\"></p>\n<p>We use <code>LOAD DATA</code> to load data into OpenMLDB cluster. We select <code>offline</code> here, so it will load to offline storage.</p>\n<h3>Feature extraction</h3>\n<p><img src=\"../../../../img/tasks/demo/openmldb-feature-extraction.png\" alt=\"fe\"></p>\n<p>We use <code>SELECT INTO</code> to do feature extraction. We select <code>offline</code> here, so it will run sql on offline engine.</p>\n<h3>Environment to Prepare</h3>\n<h4>Start the OpenMLDB Cluster</h4>\n<p>You should create an OpenMLDB cluster first. If in production env, please check <a href=\"https://openmldb.ai/docs/en/v0.5/deploy/install_deploy.html\">deploy OpenMLDB</a>.</p>\n<p>You can follow <a href=\"https://openmldb.ai/docs/zh/v0.5/quickstart/openmldb_quickstart.html#id11\">run OpenMLDB in docker</a>\nto a quick start.</p>\n<h4>Python Environment</h4>\n<p>The OpenMLDB task will use OpenMLDB Python SDK to connect OpenMLDB cluster. So you should have the Python env.</p>\n<p>We will use <code>python3</code> by default. You can set <code>PYTHON_HOME</code> to use your custom python env.</p>\n<p>Make sure you have installed OpenMLDB Python SDK in the host where the worker server running, using <code>pip install openmldb</code>.</p>\n",
  "link": "/dist/en-us/docs/dev/user_doc/guide/task/openmldb.html",
  "meta": {}
}