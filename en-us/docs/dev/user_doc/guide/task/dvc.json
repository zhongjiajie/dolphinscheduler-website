{
  "filename": "dvc.md",
  "__html": "<h1>DVC Node</h1>\n<h2>Overview</h2>\n<p><a href=\"https://dvc.org\">DVC (Data Version Control)</a> is an excellent open-source  version control system for machine learning projects.</p>\n<p>The DVC plugin is used to use the data version management function of DVC on DolphinScheduler, helping users to carry out data version management easily.</p>\n<p>The plugin provides the following three functions:</p>\n<ul>\n<li>Init DVC: Initialize the Git repository as a DVC repository and bind the address where the data is stored to store the actual data.</li>\n<li>Upload: Add or update specific data to the repository and record the version tag.</li>\n<li>Download: Download a specific version of data from the repository.</li>\n</ul>\n<h2>Create Task</h2>\n<ul>\n<li>Click <code>Project -&gt; Management-Project -&gt; Name-Workflow Definition</code>, and click the &quot;Create Workflow&quot; button to enter the\nDAG editing page.</li>\n<li>Drag from the toolbar <img src=\"../../../../img/tasks/icons/dvc.png\" width=\"15\"/> task node to canvas.</li>\n</ul>\n<h2>Task Example</h2>\n<p>First, introduce some general parameters of DolphinScheduler:</p>\n<ul>\n<li><strong>Node name</strong>: The node name in a workflow definition is unique.</li>\n<li><strong>Run flag</strong>: Identifies whether this node schedules normally, if it does not need to execute, select\nthe <code>prohibition execution</code>.</li>\n<li><strong>Descriptive information</strong>: Describe the function of the node.</li>\n<li><strong>Task priority</strong>: When the number of worker threads is insufficient, execute in the order of priority from high\nto low, and tasks with the same priority will execute in a first-in first-out order.</li>\n<li><strong>Worker grouping</strong>: Assign tasks to the machines of the worker group to execute. If <code>Default</code> is selected,\nrandomly select a worker machine for execution.</li>\n<li><strong>Environment Name</strong>: Configure the environment name in which run the script.</li>\n<li><strong>Times of failed retry attempts</strong>: The number of times the task failed to resubmit.</li>\n<li><strong>Failed retry interval</strong>: The time interval (unit minute) for resubmitting the task after a failed task.</li>\n<li><strong>Delayed execution time</strong>: The time (unit minute) that a task delays in execution.</li>\n<li><strong>Timeout alarm</strong>: Check the timeout alarm and timeout failure. When the task runs exceed the &quot;timeout&quot;, an alarm\nemail will send and the task execution will fail.</li>\n<li><strong>Predecessor task</strong>: Selecting a predecessor task for the current task, will set the selected predecessor task as\nupstream of the current task.</li>\n</ul>\n<p>Here are some specific parameters for the DVC plugin:</p>\n<ul>\n<li><strong>DVC Task Type</strong> ：Upload, Download or Init DVC。</li>\n<li><strong>DVC Repository</strong> ：The DVC repository address associated with the task execution.</li>\n</ul>\n<h3>Init DVC</h3>\n<p>Initialize the Git repository as a DVC repository and add a new data remote to save data.</p>\n<p>After the project is initialized, it is still a Git repository, but with DVC features added.</p>\n<p>The data is not actually stored in a Git repository, but somewhere else, and DVC keeps track of the version and address of the data and handles this relationship.</p>\n<p><img src=\"../../../../img/tasks/demo/dvc_init.png\" alt=\"dvc_init\"></p>\n<p><strong>Task Parameter</strong></p>\n<ul>\n<li><strong>Remote Store Url</strong> ：The actual data is stored at the address. You can learn about the supported storage types from the <a href=\"https://dvc.org/doc/command-reference/remote/add#supported-storage-types\">DVC supported storage types</a> .</li>\n</ul>\n<p>The example above shows that:\nInitialize repository <code>git@github.com:&lt;YOUR-NAME-OR-ORG&gt;/dvc-data-repository-example.git</code> as a DVC project and bind the remote storage address to <code>~/dvc</code></p>\n<h3>Upload</h3>\n<p>Used to upload and update data and record version numbers.</p>\n<p><img src=\"../../../../img/tasks/demo/dvc_upload.png\" alt=\"dvc_upload\"></p>\n<p><strong>Task Parameter</strong></p>\n<ul>\n<li><strong>Data Path in DVC Repository</strong> ：The data will be uploaded to this path in the repository.</li>\n<li><strong>Data Path In Worker</strong> ：Data path to be uploaded.</li>\n<li><strong>Version</strong> ：After the data is uploaded, the version tag for the data will be saved in <code>git tag</code>.</li>\n<li><strong>Version Message</strong> ：Version Message.</li>\n</ul>\n<p>The example above shows that:</p>\n<p>Upload data <code>/home/data/iris</code> to the root directory of repository <code>git@github.com:&lt;YOUR-NAME-OR-ORG&gt;/dvc-data-repository-example.git</code>. The file or folder of data is named <code>iris</code>.</p>\n<p>Then run <code>git tag &quot;iris_1.0&quot; -m &quot;init iris data&quot;</code>. Record the version tag <code>iris_1.0</code> and the version message <code>inir iris data</code>.</p>\n<h3>Download</h3>\n<p>Used to download data for a specific version.</p>\n<p><img src=\"../../../../img/tasks/demo/dvc_download.png\" alt=\"dvc_download\"></p>\n<p><strong>Task Parameter</strong></p>\n<ul>\n<li><strong>Data Path in DVC Repository</strong> ：The path to the data to download in the DVC repository.</li>\n<li><strong>Data Path In Worker</strong> ：Path for saving data after the file is downloaded to the local.</li>\n<li><strong>Version</strong> ：The version of the data to download.</li>\n</ul>\n<p>The example above shows that:</p>\n<p>Download the data for iris data at version <code>iris_1.0</code> in repository <code>git@github.com:&lt;YOUR-NAME-OR-ORG&gt;/dvc-data-repository-example.git</code> to the <code>~/dvc_test/iris</code></p>\n<h2>Environment to prepare</h2>\n<h3>Install DVC</h3>\n<p>Make sure you have installed DVC, if not, you can run <code>pip install dvc</code> command to install it.</p>\n<p>Get the 'dvc' path and configure the environment variables.</p>\n<p>The conda environment is used as an example:</p>\n<p>Install python PIP on Conda and configure conda's environment variables so that the component can correctly find the 'DVC' command</p>\n<pre><code class=\"language-shell\">which dvc\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> &gt;&gt; ~/anaconda3/bin/dvc</span>\n</code></pre>\n<p>You need to enter the admin account to configure a conda environment variable（Please\ninstall <a href=\"https://docs.continuum.io/anaconda/install/\">anaconda</a>\nor <a href=\"https://docs.conda.io/en/latest/miniconda.html#installing\">miniconda</a> in advance).</p>\n<p><img src=\"../../../../img/tasks/demo/dvc_env_config.png\" alt=\"dvc_env_config\"></p>\n<p>Note During the configuration task, select the conda environment created above. Otherwise, the program cannot find the\nConda environment.</p>\n<p><img src=\"../../../../img/tasks/demo/dvc_env_name.png\" alt=\"dvc_env_name\"></p>\n",
  "link": "/dist/en-us/docs/dev/user_doc/guide/task/dvc.html",
  "meta": {}
}