{
  "filename": "pseudo-cluster.md",
  "__html": "<h1>Pseudo-Cluster Deployment</h1>\n<p>The purpose of the pseudo-cluster deployment is to deploy the DolphinScheduler service on a single machine. In this mode, DolphinScheduler's master, worker, API server, are all on the same machine.</p>\n<p>If you are a new hand and want to experience DolphinScheduler functions, we recommend you install follow <a href=\"standalone.md\">Standalone deployment</a>. If you want to experience more complete functions and schedule massive tasks, we recommend you install follow <a href=\"pseudo-cluster.md\">pseudo-cluster deployment</a>. If you want to deploy DolphinScheduler in production, we recommend you follow <a href=\"cluster.md\">cluster deployment</a> or <a href=\"kubernetes.md\">Kubernetes deployment</a>.</p>\n<h2>Preparation</h2>\n<p>Pseudo-cluster deployment of DolphinScheduler requires external software support:</p>\n<ul>\n<li>JDK：Download <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+), and configure <code>JAVA_HOME</code> to and <code>PATH</code> variable. You can skip this step, if it already exists in your environment.</li>\n<li>Binary package: Download the DolphinScheduler binary package at <a href=\"https://dolphinscheduler.apache.org/en-us/download/download.html\">download page</a></li>\n<li>Database: <a href=\"https://www.postgresql.org/download/\">PostgreSQL</a> (8.2.15+) or <a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a> (5.7+), you can choose one of the two, such as MySQL requires JDBC Driver 8.0.16</li>\n<li>Registry Center: <a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a> (3.4.6+)，<a href=\"https://zookeeper.apache.org/releases.html\">download link</a></li>\n<li>Process tree analysis\n<ul>\n<li><code>pstree</code> for macOS</li>\n<li><code>psmisc</code> for Fedora/Red/Hat/CentOS/Ubuntu/Debian</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong><em>Note:</em></strong> DolphinScheduler itself does not depend on Hadoop, Hive, Spark, but if you need to run tasks that depend on them, you need to have the corresponding environment support.</p>\n</blockquote>\n<h2>DolphinScheduler Startup Environment</h2>\n<h3>Configure User Exemption and Permissions</h3>\n<p>Create a deployment user, and make sure to configure <code>sudo</code> without password. Here make an example to create user <code>dolphinscheduler</code>:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> To create a user, login as root</span>\nuseradd dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Add password</span>\necho &quot;dolphinscheduler&quot; | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Configure sudo without password</span>\nsed -i &#x27;$adolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL&#x27; /etc/sudoers\nsed -i &#x27;s/Defaults    requirett/#Defaults    requirett/g&#x27; /etc/sudoers\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Modify directory permissions and grant permissions <span class=\"hljs-keyword\">for</span> user you created above</span>\nchown -R dolphinscheduler:dolphinscheduler apache-dolphinscheduler-*-bin\n</code></pre>\n<blockquote>\n<p><strong><em>NOTICE:</em></strong></p>\n<ul>\n<li>Due to DolphinScheduler's multi-tenant task switch user using command <code>sudo -u {linux-user}</code>, the deployment user needs to have <code>sudo</code> privileges and be password-free. If novice learners don’t understand, you can ignore this point for now.</li>\n<li>If you find the line &quot;Defaults requirett&quot; in the <code>/etc/sudoers</code> file, please comment the content.</li>\n</ul>\n</blockquote>\n<h3>Configure Machine SSH Password-Free Login</h3>\n<p>Since resources need to be sent to different machines during installation, SSH password-free login is required between each machine. The following shows the steps to configure password-free login:</p>\n<pre><code class=\"language-shell\">su dolphinscheduler\n\nssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n<blockquote>\n<p><strong><em>Notice:</em></strong> After the configuration is complete, you can run the command <code>ssh localhost</code> to test works or not. If you can login with ssh without password stands for successful.</p>\n</blockquote>\n<h3>Start ZooKeeper</h3>\n<p>Go to the ZooKeeper installation directory, copy configure file <code>zoo_sample.cfg</code> to <code>conf/zoo.cfg</code>, and change value of dataDir in <code>conf/zoo.cfg</code> to <code>dataDir=./tmp/zookeeper</code>.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Start ZooKeeper</span>\n./bin/zkServer.sh start\n</code></pre>\n<!--\nModify the database configuration and initialize\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/dolphinscheduler?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true\n# Modify it if you are not using dolphinscheduler/dolphinscheduler as your username and password\nspring.datasource.username=dolphinscheduler\nspring.datasource.password=dolphinscheduler\n```\n\nAfter modifying and saving, execute the following command to create database tables and init basic data.\n\n```shell\nsh script/create-dolphinscheduler.sh\n```\n-->\n<h2>Modify Configuration</h2>\n<p>After completing the preparation of the basic environment, you need to modify the configuration file according to your environment. The configuration file is in the path of <code>conf/config/install_config.conf</code>. Generally, you just need to modify the <strong>INSTALL MACHINE, DolphinScheduler ENV, Database, Registry Server</strong> part to complete the deployment, the following describes the parameters that must be modified:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> INSTALL MACHINE</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Due to the master, worker, and API server being deployed on a single node, the IP of the server is the machine IP or localhost</span>\nips=&quot;localhost&quot;\nmasters=&quot;localhost&quot;\nworkers=&quot;localhost:default&quot;\nalertServer=&quot;localhost&quot;\napiServers=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> DolphinScheduler installation path, it will auto-create <span class=\"hljs-keyword\">if</span> not exists</span>\ninstallPath=&quot;~/dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Deploy user, use the user you create <span class=\"hljs-keyword\">in</span> section **Configure machine SSH password-free login**</span>\ndeployUser=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> DolphinScheduler ENV</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> The path of JAVA_HOME, <span class=\"hljs-built_in\">which</span> JDK install path <span class=\"hljs-keyword\">in</span> section **Preparation**</span>\njavaHome=&quot;/your/java/home/here&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Database</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Database <span class=\"hljs-built_in\">type</span>, username, password, IP, port, metadata. For now `dbtype` supports `mysql` and `postgresql`</span>\ndbtype=&quot;mysql&quot;\ndbhost=&quot;localhost:3306&quot;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Need to modify <span class=\"hljs-keyword\">if</span> you are not using `dolphinscheduler/dolphinscheduler` as your username and password</span>\nusername=&quot;dolphinscheduler&quot;\npassword=&quot;dolphinscheduler&quot;\ndbname=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Registry Server</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Registration center address, the address of ZooKeeper service</span>\nregistryServers=&quot;localhost:2181&quot;\n</code></pre>\n<h2>Initialize the Database</h2>\n<p>DolphinScheduler metadata is stored in the relational database. Currently, supports PostgreSQL and MySQL. If you use MySQL, you need to manually download <a href=\"https://downloads.MySQL.com/archives/c-j/\">mysql-connector-java driver</a> (8.0.16) and move it to the lib directory of DolphinScheduler. Let's take MySQL as an example for how to initialize the database:</p>\n<pre><code class=\"language-shell\">mysql -uroot -p\n<span class=\"hljs-meta\">\nmysql&gt;</span><span class=\"bash\"> CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Change {user} and {password} by requests</span>\n<span class=\"hljs-meta\">mysql&gt;</span><span class=\"bash\"> GRANT ALL PRIVILEGES ON dolphinscheduler.* TO <span class=\"hljs-string\">&#x27;{user}&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;{password}&#x27;</span>;</span>\n<span class=\"hljs-meta\">mysql&gt;</span><span class=\"bash\"> GRANT ALL PRIVILEGES ON dolphinscheduler.* TO <span class=\"hljs-string\">&#x27;{user}&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;{password}&#x27;</span>;</span>\n<span class=\"hljs-meta\">\nmysql&gt;</span><span class=\"bash\"> flush privileges;</span>\n</code></pre>\n<p>After the above steps done you would create a new database for DolphinScheduler, then run Shell scripts to init database:</p>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n<h2>Start DolphinScheduler</h2>\n<p>Use <strong>deployment user</strong> you created above, running the following command to complete the deployment, and the server log will be stored in the logs folder.</p>\n<pre><code class=\"language-shell\">sh install.sh\n</code></pre>\n<blockquote>\n<p><strong><em>Note:</em></strong> For the first time deployment, there maybe occur five times of <code>sh: bin/dolphinscheduler-daemon.sh: No such file or directory</code> in the terminal,\nthis is non-important information that you can ignore.</p>\n</blockquote>\n<h2>Login DolphinScheduler</h2>\n<p>Access address <code>http://localhost:12345/dolphinscheduler</code> and login DolphinScheduler UI. The default username and password are <strong>admin/dolphinscheduler123</strong></p>\n<h2>Start or Stop Server</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Stop all DolphinScheduler server</span>\nsh ./bin/stop-all.sh\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start all DolphinScheduler server</span>\nsh ./bin/start-all.sh\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop DolphinScheduler Master</span>\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\nsh ./bin/dolphinscheduler-daemon.sh start master-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop DolphinScheduler Worker</span>\nsh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop DolphinScheduler Api</span>\nsh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop Alert</span>\nsh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n</code></pre>\n<blockquote>\n<p><strong><em>Note:</em></strong>: Please refer to the section of &quot;System Architecture Design&quot; for service usage. Python gateway service is\nstarted along with the api-server, and if you do not want to start Python gateway service please disabled it by changing\nthe yaml config <code>python-gateway.enabled : false</code> in api-server's configuration path <code>api-server/conf/application.yaml</code></p>\n</blockquote>\n",
  "link": "/dist/en-us/docs/3.0.0/user_doc/guide/installation/pseudo-cluster.html",
  "meta": {}
}