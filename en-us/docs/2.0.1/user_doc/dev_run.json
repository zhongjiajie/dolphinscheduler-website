{
  "filename": "dev_run.md",
  "__html": "<h2>Development Environment Setup</h2>\n<blockquote>\n<p>Reference: <a href=\"/zh-cn/blog/DS_run_in_windows.html\">DolphinScheduler builds the development environment on Windows local.</a></p>\n</blockquote>\n<h4>1. Download the source code</h4>\n<p>GitHub ：<a href=\"https://github.com/apache/dolphinscheduler\">https://github.com/apache/dolphinscheduler</a></p>\n<pre><code class=\"language-shell\">mkdir dolphinscheduler\ncd dolphinscheduler\ngit clone git@github.com:apache/dolphinscheduler.git\n</code></pre>\n<p>We use the dev branch here.</p>\n<h4>2. The zookeeper installation for Windows</h4>\n<p>i. Download <a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz\">zookeeper</a></p>\n<p>ii. Unzip apache-zookeeper-3.6.3-bin.tar.gz</p>\n<p>iii. Create new zkData, zkLog folders in zk's directory.</p>\n<p>iv. Copy the zoo_sample.cfg file from the conf directory. Then rename it to zoo.cfg and change the configuration of the data and logs in it. For example:</p>\n<pre><code>dataDir=D:\\\\code\\\\apache-zookeeper-3.6.3-bin\\\\zkData\ndataLogDir=D:\\\\code\\\\apache-zookeeper-3.6.3-bin\\\\zkLog\n</code></pre>\n<p>v. Run zkServer.cmd in the bin, and then run zkCli.cmd to view the running status of zk. If you can view the zk node information, it means the installation is successful.</p>\n<h4>3. Set up the back-end</h4>\n<p>i. Create a new database locally for debugging. DolphinScheduler supports mysql and postgresql, here we use mysql for configuration and the database name could be : dolphinscheduler.</p>\n<p>ii. Import the code into IDEA, modify pom.xml in the root project, and change the scope of the mysql-connector-java dependency to compile.</p>\n<p>iii. Run <code>mvn -U install package -Prelease -Dmaven.test.skip=true</code>in terminal to install the required registered plugins.</p>\n<p>iv. Modify the datasource.properties of the dolphinscheduler-dao module:</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># mysql</span>\n<span class=\"hljs-meta\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n<span class=\"hljs-meta\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8</span>\n<span class=\"hljs-meta\">spring.datasource.username</span>=<span class=\"hljs-string\">root</span>\n<span class=\"hljs-meta\">spring.datasource.password</span>=<span class=\"hljs-string\">123456</span>\n</code></pre>\n<p>v. Refresh the dao module and run the main method of org.apache.dolphinscheduler.dao.upgrade.shell.CreateDolphinScheduler to automatically insert the tables and data which are required by the project.If you encounter problems such as non-existent database fields, you can try to solve them by running the sql file of the corresponding database under <code>dolphinscheduler\\sql</code>.</p>\n<p>vi. Modify registry.properties for dolphinscheduler-service module and worker.properties for dolphinscheduler-server module respectively, note: <code>1.3.6-SNAPSHOT</code> here is based on the actual generated file</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">#registry.plugin.dir config the Registry Plugin dir.</span>\n<span class=\"hljs-meta\">registry.plugin.dir</span>=<span class=\"hljs-string\">./dolphinscheduler-dist/target/dolphinscheduler-dist-1.3.6-SNAPSHOT/lib/plugin/registry/zookeeper</span>\n\n<span class=\"hljs-meta\">registry.plugin.name</span>=<span class=\"hljs-string\">zookeeper</span>\n<span class=\"hljs-meta\">registry.servers</span>=<span class=\"hljs-string\">127.0.0.1:2181</span>\n</code></pre>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">#task.plugin.dir config the #task.plugin.dir config the Task Plugin dir . WorkerServer while find and load the Task Plugin Jar from this dir when deploy and start WorkerServer on the server .</span>\n<span class=\"hljs-meta\">task.plugin.dir</span>=<span class=\"hljs-string\">./dolphinscheduler-task-plugin/dolphinscheduler-task-shell/target/dolphinscheduler-task-shell-1.3.6-SNAPSHOT</span>\n</code></pre>\n<p>vii. Add the console output to logback-worker.xml, logback-master.xml, and logback-api.xml.</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;INFO&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!-- Add the console output --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;APILOGFILE&quot;</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;SKYWALKING-LOG&quot;</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span>\n</code></pre>\n<p>viii. Start the MasterServer</p>\n<p>Run the main method of org.apache.dolphinscheduler.server.master.MasterServer. You need to set the following VM options:</p>\n<pre><code>-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<p>ix. Start the WorkerServer</p>\n<p>Run the main method of org.apache.dolphinscheduler.server.worker.WorkerServer. You need to set the following VM options:</p>\n<pre><code>-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<p>x. Start the ApiApplicationServer</p>\n<p>Run the main method of org.apache.dolphinscheduler.api.ApiApplicationServer. You need to set the following VM options:</p>\n<pre><code>-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api\n</code></pre>\n<p>xi. If you need to use the log function, execute the main method of org.apache.dolphinscheduler.server.log.LoggerServer.</p>\n<p>xii. Backend swagger address: <a href=\"http://localhost:12345/dolphinscheduler/doc.html?language=zh_CN&amp;lang=cn\">http://localhost:12345/dolphinscheduler/doc.html?language=zh_CN&amp;lang=cn</a></p>\n<h4>4. Set up the front-end</h4>\n<p>i. Install node</p>\n<p>​\ta. Install nvm</p>\n<p>curl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh</a> | bash</p>\n<p>​\tb. Refresh the environment variables</p>\n<p>​\tsource ~/.bash_profile</p>\n<p>​\tc. Install node</p>\n<p>​\tnvm install v12.20.2</p>\n<p>note: Mac users could install npm through brew: brew install npm</p>\n<p>d. Validate the node installation</p>\n<p>​\tnode --version</p>\n<p>ii. cd  dolphinscheduler-ui and run the following command:</p>\n<pre><code class=\"language-shell\">npm install\nnpm run start\n</code></pre>\n<p>iii. Visit <a href=\"http://localhost:8888/\">http://localhost:8888</a></p>\n<p>iv. Sign in with the administrator account</p>\n<blockquote>\n<p>username: admin</p>\n<p>password: dolphinscheduler123</p>\n</blockquote>\n",
  "link": "/dist/en-us/docs/2.0.1/user_doc/dev_run.html",
  "meta": {}
}